#include <stdio.h>
#include <stdlib.h>

#define NUM 10000

int main()
{
    int i,roll;
    int counts[13];
    for(i = 0; i < 13; i++)
        counts[i] = 0;

    for(i = 0; i < NUM; i++)
    {
            // Hapless Hap wants to shorten the following statement
            // while keeping the same values.

        roll = 2 * (random() % 6) + 2;
        counts[roll]++;
    }
    for(i = 2; i < 13; i++)
        printf("%d throws yielded %d rolls of %d\n",NUM,i, counts[i]);
}

#include <stdio.h>
#include <stdlib.h>


int main()
{
    int i,roll, NUM =17;
    int counts[13];
    for(i = 0; i < 13; i++)
        counts[i] = 0;

    printf("Please enter the number of times you'd like to throw 2 dice\n");
    scanf("%d",&NUM);


    for(i = 0; i < NUM; i++)
    {
	    // random() generates a "random" value in the
            // range of 0 .. maxInt

            // two dice, each with values from 0..5

        roll = (random() % 6) + (random() % 6) + 2;
        counts[roll]++;
    }
    for(i = 2; i < 13; i++)
        printf("%d throws yielded %d rolls of %d\n",NUM,counts[i],i);
}

#include <stdio.h>

#define SIZE 1000
int Array[SIZE];
int main()
{
    int i;
    for(i = 0; i < SIZE; i++)
        Array[i] = random() % 25000 + 1;
    findMinMax();
    printf("The minimum value is %d\n", Array[0]);
    printf("The maximum value is %d\n", Array[SIZE-1]);
}


int findMinMax()
{
    int i, min = 25000, max = 0;
    int minIndex, maxIndex;
    for(i = 0; i < SIZE; i++)
    {
	if( Array[i] < min )
        {
	    min = Array[i];
            minIndex = i;
        }
	if( Array[i] > max )
        {
	    max = Array[i];
            maxIndex = i;
        }

    }
    swap(&(Array[minIndex]), Array);
    swap(Array + maxIndex, Array+SIZE-1);
}

int swap(int *a, int *b)
{
    int t = *a;
    *a = *b;
    *b = t;
    return 0;
}
#include <stdio.h>
#include <math.h>
#define NUM  1973 


int main()
{
    int i;
    for(i = 2; i < sqrt(NUM); i++)
    if( (NUM % i == 0) )
    {
	printf("NUM is  %d * %d and so it is not prime\n", i, NUM/i);
	return 0;
    }

    printf("%d IS prime\n",NUM);
    return 0;
}
#include <stdio.h>

int main()
{
    int i;
    char *buffer;

    buffer = (char *) malloc(20);
    strcpy(buffer, "ET phone home!");

    for(i = 0; i < strlen(buffer); i++)
	buffer[i] += 4;

   printf("The code is      %s\n", buffer);
}
#include <stdio.h>

int main()
{
    int i;
    char buffer[80];

    strcpy(buffer, "Irgv}txmsr$mw$jyr%");

    for(i = 0; i < strlen(buffer); i++)
	buffer[i] -= 4;

   printf("The code is      %s\n", buffer);

}
#include <stdio.h> 

#define N 40

static int A[N];
void permute(int num)
{
    int i;
    if( num == N-1 )
    {
        for( i = 0; i < N; i++ )
	    printf("%d ",A[i]);
	printf("\n");
    }
    else
    {
        int j, temp;
        for( j = num; j < N; j++ )
        {
	    temp = A[num]; A[num] = A[j]; A[j] = temp;
            permute(num+1);
	    temp = A[num]; A[num] = A[j]; A[j] = temp;
        }
    }
}


int main()
{
    int i;
    for( i = 0; i < N; i++ )
        A[i] = i+1;
    permute(0);  
}
#include <stdio.h>
#include <stdlib.h>

void doThatArgThing(int argc, char *argv[]);

int main( int argc,  char *argv[] )
{
    doThatArgThing(argc, argv);
}

void doThatArgThing(int argc, char *argv[])
{
    int i;
    char *buffer;

    for( i = 0; i < argc; i++ )
    {
        printf("argument %i = %s\n", i, argv[i]);
    }

}

